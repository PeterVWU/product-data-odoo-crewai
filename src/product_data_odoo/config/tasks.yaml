orchestrate_task:
  description: >
    Coordinate the initial data processing pipeline using standardized file paths. 
    1) Call CSV Processor tool: input={csv_path}, output={cleaned_dir}
    2) Call Product Parser tool: input={cleaned_csv}, output={parsed_dir}  
    Use the provided file paths from inputs for coordination. This task focuses on CSV processing 
    and regex parsing. Batch LLM processing is handled separately.
  expected_output: >
    A comprehensive project status report including data quality metrics, parsing results,
    LLM assistance statistics, and final output file locations. Include decision rationale 
    for each processing stage and recommendations.
  agent: orchestrator

smart_parse_task:
  description: >
    You are an expert at extracting attributes from product text. You will receive a batch containing 
    multiple attribute texts in the {batch} input. Each item has an index and attributes_text to analyze.
    
    Your job: For each attributes_text, identify what attributes are present and extract their values.
    
    Common attributes you might find:
    - Flavors (e.g., "Cherry Lime", "Vanilla", "Apple Ice")
    - Nicotine strength in mg (e.g., "12mg", "6mg", "50mg")  
    - Volume in ml (e.g., "60mL", "100mL", "30ml")
    - Colors (e.g., "Black", "Blue", "Rainbow")
    - Technical specs (e.g., "0.2ohm", "80W", "1.0ohm")
    
    Rules:
    - Extract any attribute you can identify from the text
    - Clean up values (remove "(Discontinued)", convert "mg" to numbers)
    - If text seems like hardware specs or colors, those are valid attributes too
    - If text is empty or unclear, return empty attributes object
    - CRITICAL: Always return attribute values as simple strings, NEVER as arrays
    - Each CSV row represents ONE specific product variant, so extract the specific attribute value for that row only
  expected_output: >
    Return ONLY a valid JSON array. Each object must have: index (number) and attributes (object with key-value pairs).
    All attribute values MUST be simple strings, never arrays.
    Example: [{"index": 123, "attributes": {"flavor": "Cherry Lime", "nicotine_mg": "12", "volume_ml": "60"}}]
    For hardware: [{"index": 456, "attributes": {"color": "Black", "resistance": "0.2ohm"}}]
    WRONG: {"color": ["White", "Blue"]} - Do not use arrays
    CORRECT: {"color": "White"} - Use single string values only
  agent: smart_parser

category_mapping_task:
  description: >
    Map all parsed products to existing Odoo categories using the Category Mapper tool.
    
    Use the following inputs for the tool:
    - clear_products_file: {clear_products_file}
    - llm_parsed_results_file: {llm_parsed_results_file}
    - odoo_categories_file: {odoo_categories_file}
    - output_dir: {output_dir}
    
    The tool will analyze product characteristics (flavors, nicotine, hardware specs) and map them to
    appropriate Odoo categories like E-Juice, Disposable, Coil, Kit, etc.
    
    Review the mapping results and provide insights about:
    - Category distribution across products
    - Mapping confidence and reasoning
    - Any products that need manual review
    - Recommendations for category optimization
  expected_output: >
    A detailed category mapping report including:
    - Total products mapped and distribution by category
    - Mapping methodology and confidence levels
    - Summary of most common categories assigned
    - Identification of any edge cases or products needing manual review
    - Quality assessment of category assignments
  agent: orchestrator

attribute_building_task:
  description: >
    Generate Odoo product attributes CSV using the Attribute Builder tool.
    
    Use the following inputs for the tool:
    - clear_products_file: {clear_products_file}
    - llm_parsed_results_file: {llm_parsed_results_file}
    - odoo_attributes_file: {odoo_attributes_file}
    - output_dir: {output_dir}
    
    The tool will:
    1. Collect all unique attributes from both regex and LLM parsed results
    2. Generate Odoo attribute definitions (flavor, nicotine_mg, volume_ml, color, etc.)
    3. Create attribute values with External IDs
    4. Determine appropriate display types (radio, select) based on value characteristics
    5. Output attributes.csv for Odoo import
    
    Review the attribute generation results and provide insights about:
    - Total attributes discovered and their value counts
    - Attribute usage distribution between regex vs LLM sources
    - Display type assignments and reasoning
    - Data quality assessment for attribute values
    - Recommendations for attribute optimization
  expected_output: >
    A comprehensive attribute generation report including:
    - Total attributes created and value counts
    - Source distribution (regex vs LLM parsing)
    - Display type assignments with justification
    - Quality assessment of attribute values
    - Summary of most common attribute types
    - Recommendations for attribute standardization
    - Path to generated attributes.csv file
  agent: orchestrator

human_checkpoint_task:
  description: >
    Coordinate the human-in-the-loop checkpoint for Odoo attribute import/export.
    
    Check the checkpoint status using the flag: {attribute_import_completed}
    
    If checkpoint NOT completed (attribute_import_completed = False):
    1. Provide clear, step-by-step instructions for human to complete Odoo imports
    2. List the exact file paths to import into Odoo:
       - output/attributes/existing_attributes_values.csv (format: id,name,value/value)  
       - output/attributes/new_attributes.csv (format: value/value,attribute,display_type,create_variant)
    3. Specify the required export files and where to place them:
       - Export updated attributes → src/product_data_odoo/updated_odoo_attributes.csv
       - Export product templates → src/product_data_odoo/existing_product_templates.csv  
    4. Explain how to resume: Set ATTRIBUTE_IMPORT_COMPLETED = True and re-run
    
    If checkpoint IS completed (attribute_import_completed = True):
    1. Report that checkpoint is complete and pipeline will continue
    2. Confirm files are ready for template building phase
    3. Do NOT use any tools - just provide confirmation message
    
    IMPORTANT: Do not use any tools for file validation. Only provide status messages based on the flag.
    
    Required files after human import:
    - {updated_odoo_attributes_file}: Updated attributes with new External IDs
    - {existing_product_templates_file}: Current product templates from Odoo
      Format: "id","default_code","name","categ_id/id","attribute_line_ids/attribute_id","attribute_line_ids/attribute_id/id"
  expected_output: >
    Either detailed human instructions for Odoo import/export OR confirmation that
    checkpoint is complete and ready to proceed to template building phase.
  agent: orchestrator

template_building_task:
  description: >
    Generate Odoo product templates CSV using the Template Builder tool.
    
    Use the following inputs for the tool:
    - clear_products_file: {clear_products_file}
    - llm_parsed_results_file: {llm_parsed_results_file}
    - category_mappings_file: {output_dir}/categories/category_mappings.json
    - updated_odoo_attributes_file: {updated_odoo_attributes_file}
    - existing_product_templates_file: {existing_product_templates_file}
    - output_dir: {output_dir}
    - odoo_categories_file: {odoo_categories_file}
    
    The tool will:
    1. Group products by product_name to create templates
    2. Calculate template-level data (average pricing, attribute configurations)
    3. Check against existing Odoo templates to avoid duplicates
    4. Generate two separate CSVs:
       - existing_template_updates.csv: Add attribute lines to existing templates
       - new_templates.csv: Create completely new templates
    5. Use updated attribute External IDs from post-import Odoo data
    
    Review the template generation results and provide insights about:
    - Total templates created vs updated
    - Template grouping logic and variant counts
    - Attribute line configurations
    - Pricing calculations and category assignments
    - Recommendations for template optimization
  expected_output: >
    A comprehensive template generation report including:
    - Total templates processed (existing vs new)
    - Template grouping statistics and variant counts
    - Attribute line configuration summary
    - Category distribution across templates
    - Quality assessment of template generation
    - Recommendations for template management
    - Paths to generated CSV files
  agent: orchestrator

variant_checkpoint_task:
  description: >
    Coordinate the human-in-the-loop checkpoint for Odoo template import/variant export.
    
    Check the checkpoint status using the flag: {variant_import_completed}
    
    If checkpoint NOT completed (variant_import_completed = False):
    1. Provide clear, step-by-step instructions for human to complete Odoo template import and variant export
    2. List the exact file paths to import into Odoo:
       - output/templates/new_templates.csv (format: External ID-based template records)
    3. Specify the required export file and where to place it:
       - Export all product variants → src/product_data_odoo/odoo_product_variant.csv
       - Format: "ID","Name","Variant Values" (includes newly created variants from templates)
    4. Explain how to resume: Set VARIANT_IMPORT_COMPLETED = True and re-run
    
    If checkpoint IS completed (variant_import_completed = True):
    1. Report that checkpoint is complete and pipeline will continue
    2. Confirm odoo_product_variant.csv is ready for variant building phase
    3. Do NOT use any tools - just provide confirmation message
    
    IMPORTANT: Do not use any tools for file validation. Only provide status messages based on the flag.
    
    Required file after human export:
    - {odoo_product_variant_file}: All product variants with External IDs
      Format: "ID","Name","Variant Values" (e.g., "Color: Black", "Flavor: Cherry Lime")
  expected_output: >
    Either detailed human instructions for Odoo template import/variant export OR confirmation that
    checkpoint is complete and ready to proceed to variant building phase.
  agent: orchestrator

variant_building_task:
  description: >
    Generate product variant import CSV using template value IDs from Odoo template export.
    
    Use the following inputs for the tool:
    - clear_products_file: {clear_products_file}
    - llm_parsed_results_file: {llm_parsed_results_file}
    - odoo_product_template_file: {odoo_product_template_file}
    - output_dir: {output_dir}
    
    The tool will:
    1. Load all processed product data (clear + LLM parsed with SKU/price included)
    2. Parse Odoo template export to extract template value IDs by template
    3. Match products to templates first, then find attribute combinations within templates
    4. Generate variant import CSV using template-specific value IDs
    5. Create records with External IDs, template references, value ID combinations, SKUs, and prices
    
    Review the variant generation results and provide insights about:
    - Total products processed and variant generation success rate
    - Template matching accuracy and template coverage
    - Attribute combination matching within templates
    - SKU assignment and pricing distribution
    - Any unmatched products that need manual review
    - Template value ID mapping quality
  expected_output: >
    A comprehensive variant generation report including:
    - Total products processed and variants successfully generated
    - Generation rate percentage and template matching accuracy
    - Template coverage analysis and attribute mapping success
    - SKU assignment statistics and pricing summary
    - Details on unmatched products or failed attribute combinations
    - Template value ID mapping quality assessment
    - Path to generated product_variant_import.csv file
    - Generation statistics file for review
  agent: orchestrator
